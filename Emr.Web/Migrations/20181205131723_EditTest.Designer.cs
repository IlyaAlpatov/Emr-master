// <auto-generated />
using System;
using Emr.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Emr.Web.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20181205131723_EditTest")]
    partial class EditTest
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Emr.Database.Models.Diagnos", b =>
                {
                    b.Property<Guid>("DiagnosGuid");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<string>("NameDiagnos")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("DiagnosGuid");

                    b.ToTable("Diagnoses");
                });

            modelBuilder.Entity("Emr.Database.Models.Drag", b =>
                {
                    b.Property<Guid>("DragGuid");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<string>("NameDrug")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("DragGuid");

                    b.ToTable("Drags");
                });

            modelBuilder.Entity("Emr.Database.Models.ElectronicPersonalMedicalRecord", b =>
                {
                    b.Property<Guid>("EpmrGuid");

                    b.Property<DateTime>("Date");

                    b.Property<string>("FileEpmr")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<Guid>("MedicGuid");

                    b.Property<Guid>("PatientGuid");

                    b.Property<DateTime>("Signing");

                    b.Property<string>("TextEpmr")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("EpmrGuid");

                    b.HasIndex("MedicGuid");

                    b.HasIndex("PatientGuid");

                    b.ToTable("ElectronicPersonalMedicalRecords");
                });

            modelBuilder.Entity("Emr.Database.Models.Medic", b =>
                {
                    b.Property<Guid>("MedicGuid");

                    b.Property<string>("Age")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<DateTime>("Dob")
                        .HasMaxLength(100);

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Passport")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Patronymic")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Pob")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("Snils")
                        .HasMaxLength(100);

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("MedicGuid");

                    b.ToTable("Medics");
                });

            modelBuilder.Entity("Emr.Database.Models.MedicalExamination", b =>
                {
                    b.Property<Guid>("MeGuid");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<Guid>("DiagnosGuid");

                    b.Property<DateTime>("InspectionDate");

                    b.Property<string>("InspectionResult")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<Guid>("MedicGuid");

                    b.Property<Guid>("PatientGuid");

                    b.Property<Guid>("RecipeGuid");

                    b.Property<string>("Symptom")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("MeGuid");

                    b.HasIndex("DiagnosGuid");

                    b.HasIndex("MedicGuid");

                    b.HasIndex("PatientGuid");

                    b.HasIndex("RecipeGuid");

                    b.ToTable("MedicalExaminations");
                });

            modelBuilder.Entity("Emr.Database.Models.Metric", b =>
                {
                    b.Property<Guid>("MetricGuid");

                    b.Property<int>("BodyTemperature")
                        .HasMaxLength(100);

                    b.Property<DateTime>("Date");

                    b.Property<int>("DiastolicPressure")
                        .HasMaxLength(100);

                    b.Property<int>("Growth")
                        .HasMaxLength(100);

                    b.Property<int>("Mass")
                        .HasMaxLength(100);

                    b.Property<Guid>("MedicGuid");

                    b.Property<Guid>("PatientGuid");

                    b.Property<int>("Pulse")
                        .HasMaxLength(100);

                    b.Property<int>("RespiratoryRate")
                        .HasMaxLength(100);

                    b.Property<int>("SystolicPressure")
                        .HasMaxLength(100);

                    b.Property<int>("WaistCircumference")
                        .HasMaxLength(100);

                    b.HasKey("MetricGuid");

                    b.HasIndex("MedicGuid");

                    b.HasIndex("PatientGuid");

                    b.ToTable("Metrics");
                });

            modelBuilder.Entity("Emr.Database.Models.Patient", b =>
                {
                    b.Property<Guid>("PatientGuid");

                    b.Property<string>("Age")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<DateTime>("Dob")
                        .HasMaxLength(100);

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Passport")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Patronymic")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Pob")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("Snils")
                        .HasMaxLength(100);

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("PatientGuid");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("Emr.Database.Models.RecieptDrags", b =>
                {
                    b.Property<Guid>("DragGuid");

                    b.Property<Guid>("RecipeGuid");

                    b.HasKey("DragGuid", "RecipeGuid");

                    b.HasIndex("RecipeGuid");

                    b.ToTable("RecieptDragses");
                });

            modelBuilder.Entity("Emr.Database.Models.Recipe", b =>
                {
                    b.Property<Guid>("RecipeGuid");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.HasKey("RecipeGuid");

                    b.ToTable("Recipes");
                });

            modelBuilder.Entity("Emr.Database.Models.Research", b =>
                {
                    b.Property<Guid>("ResearchGuid");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<string>("NameResearch")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("ResearchGuid");

                    b.ToTable("Researches");
                });

            modelBuilder.Entity("Emr.Database.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("RoleId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Emr.Database.Models.User", b =>
                {
                    b.Property<Guid>("UserGuid");

                    b.Property<DateTime>("BirthDay");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<int>("RoleId");

                    b.HasKey("UserGuid");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Emr.Database.Models.ElectronicPersonalMedicalRecord", b =>
                {
                    b.HasOne("Emr.Database.Models.Medic", "Medic")
                        .WithMany()
                        .HasForeignKey("MedicGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Emr.Database.Models.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientGuid")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Emr.Database.Models.MedicalExamination", b =>
                {
                    b.HasOne("Emr.Database.Models.Diagnos", "Diagnos")
                        .WithMany()
                        .HasForeignKey("DiagnosGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Emr.Database.Models.Medic", "Medic")
                        .WithMany()
                        .HasForeignKey("MedicGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Emr.Database.Models.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Emr.Database.Models.Recipe", "Recipe")
                        .WithMany()
                        .HasForeignKey("RecipeGuid")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Emr.Database.Models.Metric", b =>
                {
                    b.HasOne("Emr.Database.Models.Medic", "Medic")
                        .WithMany()
                        .HasForeignKey("MedicGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Emr.Database.Models.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientGuid")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Emr.Database.Models.RecieptDrags", b =>
                {
                    b.HasOne("Emr.Database.Models.Drag", "Drag")
                        .WithMany("RecieptDragses")
                        .HasForeignKey("DragGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Emr.Database.Models.Recipe", "Recipe")
                        .WithMany("RecieptDragses")
                        .HasForeignKey("RecipeGuid")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Emr.Database.Models.User", b =>
                {
                    b.HasOne("Emr.Database.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
